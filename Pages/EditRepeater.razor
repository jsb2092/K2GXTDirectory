@page "/editRepeater/{id}"

@using K2GXT_Directory_2.Data

@inject RepeaterDirectoryService RepeaterService
@inject NavigationManager NavManager

<a href="/getRepeaters"> <img width="16" src="/images/back.png"/> Back</a>

@if (repeater == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div><p>Editting Repeater: @repeater.CallSign (@repeater.RxFreq)</p></div>
    <EditForm Model="@repeater" OnSubmit="@HandleSubmit">
           <DataAnnotationsValidator />
            <ValidationSummary />

        <table id="repeaterDetails" style="border-wdth:1">
            <tr><td style="width:150px">Callsign: </td><td><input class="editInput" @bind=@repeater.CallSign/></td></tr>
            <tr><td>Rx Frequency: </td> <td><input class="editInput" @bind=@repeater.RxFreq/></td></tr>
            <tr><td>Tx Frequency: </td><td><input class="editInput" @bind=@repeater.TxFreq/></td></tr>

            <tr><td>Offset: </td><td>@repeater.Offset</td></tr>
            <tr><td>Tone: </td><td><select class="editInput" @bind="@repeater.Tone">
                <option value="CSQ">CSQ</option>
                <option value="Tone">Tone</option>
                <option value="T-SQL">T-SQL</option>
            </select></td></tr>
             @if (repeater.CTCSS != null && (repeater.Tone != "CSQ" && repeater.Tone != "None"))
                    {
                        <tr><td>Tx Tone: </td><td><select class="editInput" @bind=@repeater.CTCSS>
                            @foreach (var tone in RepeaterService.Tones.OrderBy(t=>t))
                               {
                                   <option value="@tone">@tone</option>
                               } 
                        </select></td></tr> 
                        @if (repeater.RxCTCSS != null && repeater.Tone == "T-SQL")
                        {
                            <tr><td>Rx Tone: </td><td><select class="editInput" @bind=@repeater.RxCTCSS>
                                @foreach (var tone in RepeaterService.Tones.OrderBy(t=>t))
                              {
                                  <option value="@tone">@tone</option>
                              }  
                            </select></td></tr>
                        }
                    }
   
            <tr><td>Latitude: </td><td><input class="editInput" @bind=@repeater.Location.coordinates[1]/></td></tr>
            <tr><td>Longitude: </td><td><input class="editInput" @bind=@repeater.Location.coordinates[0]/></td></tr>
            <tr><td>Grid Square: </td><td><input class="editInput" @bind=@repeater.GridSquare/></td></tr>
            <tr><td>State:</td><td> <select class="editInput" @bind="repeater.State">
                @if (counties != null)
                {    
                    <option style="display:none">Select a State</option>
                    @foreach (var state in counties.ToArray().AsQueryable().Select(c=>c.state_name).Distinct())
                    {
                        <option value="@state">@state</option>
                    }
                }
            </select></td></tr>
            <tr><td>County: </td><td><select class="editInput" @bind="@repeater.County">
                      @if (counties != null)
                            {
                            
                                @foreach (var county in counties.ToArray().AsQueryable().Where(c => c.state_name == repeater.State).Select(c=>c.county).OrderBy(c=>c).Distinct())
                                {
                                    <option value="@county">@county</option>
                                }
                            }
                </select></td></tr>
            <tr><td>Description: </td><td><input class="editInput" @bind=@repeater.Description/></td></tr>
        </table>
           <button type="submit">Save</button><button type="submit" @onclick="@(async () => ResetForm())">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public string id { get; set; }
    
    private Repeater repeater;
    private Repeater? previousState;
    private Counties[] counties;


   protected override async Task OnInitializedAsync()
    {
       
       repeater = await RepeaterService.GetRepeaterAsync(id);
       previousState = (Repeater)repeater.Clone();
       counties = await RepeaterService.getCounties();


    }

    private async Task HandleSubmit()
    {
        if (await RepeaterService.SaveRepeater(repeater))
        {
            previousState = null;
            NavManager.NavigateTo("/getRepeaters");
        }
    }
    
    private void ResetForm()
    {
        repeater = previousState;
        NavManager.NavigateTo("/getRepeaters");
        
    }
}
