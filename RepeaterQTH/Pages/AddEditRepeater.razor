@page "/editRepeater/{id}"
@page "/addRepeater/"
@using RepeaterQTH.Data
@using Blazored.FluentValidation
@inject RepeaterDirectoryService RepeaterService
@inject NavigationManager NavManager
<AuthorizeView Context="editPage">
<Authorized>
    <a href="/getRepeaters"> <img width="16" src="/images/back.png"/> Back</a>

    @if (repeater == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <EditForm Model="@repeater" OnValidSubmit="@HandleValidSubmit">
            <FluentValidationValidator/>
            <ValidationSummary/>


            <div style="float:left; margin-right:30px">
                @if (repeater.CallSign != null)
                {
                    <p>Editing Repeater: @repeater.CallSign (@repeater.RxFreq)</p>
                }
                else
                {
                    <p>Adding Repeater </p>

                }

                <table class="repeaterDetails">
                    <tr><td style="width:150px">Callsign: </td><td><input class="editInput" @bind=@repeater.CallSign/></td></tr>
                    <tr><td>Usability: </td>
                        <td>
                            <select class="editInput" @bind=@repeater.isOpenString>
                                <option value="Open">Open</option>
                                <option value="Closed">Closed</option>
                                <option value="Private">Private</option>
                            </select></td></tr>
                    <tr><td>Rx Frequency: </td> <td><input class="editInput" @bind=@repeater.RxFreq/></td></tr>

                    <tr><td>Tx Frequency: </td><td><input class="editInput" @bind=@repeater.TxFreq/></td></tr>

                    <tr><td>Offset: </td><td>@repeater.Offset</td></tr>
                    <tr><td>Tone: </td>
                        <td>
                            <select class="editInput" @bind="@repeater.Tone">
                                <option value="CSQ">CSQ</option>
                                <option value="Tone">Tone</option>
                                <option value="T-SQL">T-SQL</option>
                            </select></td></tr>
                    @if (!(repeater.Tone is null or "CSQ" or "None"))
                    {
                        <tr><td>Tx Tone: </td>
                            <td>
                                <select class="editInput" @bind=@repeater.CTCSS>
                                    @foreach (var tone in RepeaterService.Tones.OrderBy(t => t))
                                    {
                                        <option value="@tone">@tone</option>
                                    }
                                </select></td></tr>
                        @if (repeater.Tone == "T-SQL")
                        {
                            <tr><td>Rx Tone: </td>
                                <td>
                                    <select class="editInput" @bind=@repeater.RxCTCSS>
                                        @foreach (var tone in RepeaterService.Tones.OrderBy(t => t))
                                        {
                                            <option value="@tone">@tone</option>
                                        }
                                    </select></td></tr>
                        }
                    }

                    <tr><td>Latitude: </td><td><input class="editInput" @bind=@repeater.Location.coordinates[1]/></td></tr>
                    <tr><td>Longitude: </td><td><input class="editInput" @bind=@repeater.Location.coordinates[0]/></td></tr>
                    <tr><td>Grid Square: </td><td><input class="editInput" @bind=@repeater.GridSquare/></td></tr>
                    <tr><td>State:</td>
                        <td>
                            <select class="editInput" @bind="repeater.State">
                                @if (counties != null)
                                {
                                    <option style="display:none">Select a State</option>
                                    @foreach (var state in counties.ToArray().AsQueryable().Select(c => c.state_name).Distinct())
                                    {
                                        <option value="@state">@state</option>
                                    }
                                }
                            </select></td></tr>
                    <tr><td>County: </td>
                        <td>
                            <select class="editInput" @bind="@repeater.County">
                                @if (counties != null)
                                {

                                    @foreach (var county in counties.ToArray().AsQueryable().Where(c => c.state_name == repeater.State).Select(c => c.county).OrderBy(c => c).Distinct())
                                    {
                                        <option value="@county">@county</option>
                                    }
                                }
                            </select></td></tr>
                    <tr><td>Coverage (KM): </td><td><input class="editInput" @bind=@repeater.CoverageRadiusKM/></td></tr>

                    <tr><td>Description: </td><td><input class="editInput" @bind=@repeater.Description/></td></tr>
                </table>
            </div>
            <div style="float: left; margin-top: 15px">
                <br/>

                <TabControl>
                    <TabPage Text="Analog">
                        <table class="repeaterDetails" style="margin-top:10px">
                            <tr><td style="width:150px; ">FM Analog Mode: </td>
                                <td>

                                    <select class="editInput" @bind="@repeater.FMEnabledString">
                                        <option value="Enabled">Enabled</option>
                                        <option value="Disabled">Disabled</option>
                                    </select>
                                </td></tr>
                            <tr><td>AllStar ID: </td> <td><input disabled=@(!repeater.FMEnabled) class="editInput" @bind=@repeater.AllStarId/></td></tr>
                            <tr><td>Echolink #: </td> <td><input disabled=@(!repeater.FMEnabled) class="editInput" @bind=@repeater.EcholinkNum/></td></tr>
                            <tr><td>Echolink Call: </td> <td><input disabled=@(!repeater.FMEnabled) class="editInput" @bind=@repeater.EcholinkCall/></td></tr>
                            <tr><td>IRLP #: </td> <td><input disabled=@(!repeater.FMEnabled) class="editInput" @bind=@repeater.IRLPNum/></td></tr>
                        </table>
                    </TabPage>
                    <TabPage Text="DMR">
                        <table class="repeaterDetails" style="margin-top:10px">
                            <tr><td style="width:150px; ">DMR Mode: </td>
                                <td>
                                    <select class="editInput" @bind="@repeater.DMREnabledString">
                                        <option value="Enabled">Enabled</option>
                                        <option value="Disabled">Disabled</option>
                                    </select>
                                </td></tr>
                            <tr><td>Color Code: </td>
                                <td>
                                    <select disabled=@(!repeater.DMREnabled) class="editInput" @bind=@repeater.DMRColorCode>
                                        @for (var cc = 0; cc < 16; cc++)
                                        {
                                            <option value="@cc">@cc</option>
                                        }
                                    </select></td></tr>
                        </table>
                    </TabPage>
                    <TabPage Text="D-Star">
                        <table class="repeaterDetails" style="margin-top:10px">
                            <tr><td style="width:150px; ">D-Star Mode: </td>
                                <td>
                                    <select class="editInput" @bind="@repeater.DStarEnabledString">
                                        <option value="Enabled">Enabled</option>
                                        <option value="Disabled">Disabled</option>
                                    </select>
                                </td></tr>
                            <tr><td>D-Star Type</td> <td><input disabled=@(!repeater.DStarEnabled) class="editInput" @bind=@repeater.DStarType/></td></tr>

                        </table>
                    </TabPage>
                    <TabPage Text="P25">
                        <table class="repeaterDetails" style="margin-top:10px">
                            <tr><td style="width:150px; ">P-25 Mode: </td>
                                <td>
                                    <select class="editInput" @bind="@repeater.P25EnabledString">
                                        <option value="Enabled">Enabled</option>
                                        <option value="Disabled">Disabled</option>
                                    </select>
                                </td></tr>
                            <tr><td>NAC $</td> <td><input disabled=@(!repeater.P25Enabled) class="editInput" @bind=@repeater.P25Nac/></td></tr>

                        </table>

                    </TabPage>
                    <TabPage Text="NXDN">
                        <table class="repeaterDetails" style="margin-top:10px">
                            <tr><td style="width:150px; ">P-25 Mode: </td>
                                <td>
                                    <select class="editInput" @bind="@repeater.NXDNEnabledString">
                                        <option value="Enabled">Enabled</option>
                                        <option value="Disabled">Disabled</option>
                                    </select>
                                </td></tr>
                            <tr><td>RAN</td> <td><input disabled=@(!repeater.NXDNEnabled) class="editInput" @bind=@repeater.NXDNRAN/></td></tr>
                            <tr><td>Bandwidth</td> <td><input disabled=@(!repeater.NXDNEnabled) class="editInput" @bind=@repeater.NXDNBandwidth/></td></tr>

                        </table>

                    </TabPage>
                    <TabPage Text="YSF">
                        <table class="repeaterDetails" style="margin-top:10px">
                            <tr><td style="width:150px; ">YSF Mode: </td>
                                <td>
                                    <select class="editInput" @bind="@repeater.YSFEnabledString">
                                        <option value="Enabled">Enabled</option>
                                        <option value="Disabled">Disabled</option>
                                    </select>
                                </td></tr>
                            <tr><td>DG Up</td> <td><input disabled=@(!repeater.YSFEnabled) class="editInput" @bind=@repeater.YSFDGUp/></td></tr>
                            <tr><td>DG Down</td> <td><input disabled=@(!repeater.YSFEnabled) class="editInput" @bind=@repeater.YSFDGDown/></td></tr>
                            <tr><td>Bandwidth</td> <td><input disabled=@(!repeater.YSFEnabled) class="editInput" @bind=@repeater.YSFBandwidth/></td></tr>

                        </table>

                    </TabPage>
                </TabControl>

            </div>
            <div style="clear:both; padding-top: 15px">
                <button type="submit">Save</button><button type="submit" @onclick="@(async () => ResetForm())">Cancel</button>
            </div>

        </EditForm>

    }
</Authorized>
<NotAuthorized Context="editPage">
        <h1>Authentication Failure!</h1>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter]
    public string id { get; set; }
    
    private Repeater repeater;
#nullable enable
    private Repeater? previousState;
#nullable disable
    private Counties[] counties;



   protected override async Task OnInitializedAsync()
    {
       if (id != null)
       {
           repeater = await RepeaterService.GetRepeaterAsync(id);
           previousState = (Repeater)repeater.Clone();
       }
       else
       {
           repeater = new Repeater();
       }
       
       counties = await RepeaterService.getCounties();


    }

    private async Task HandleValidSubmit()
    {
        
       
        if (await RepeaterService.SaveRepeater(repeater))
        {
            previousState = null;
            NavManager.NavigateTo("/getRepeaters");
        }
    }
    
    private void ResetForm()
    {
        repeater = previousState;
        NavManager.NavigateTo("/getRepeaters");
        
    }
    
}
