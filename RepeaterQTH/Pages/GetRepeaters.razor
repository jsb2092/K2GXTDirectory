@page "/getRepeaters/"
@page "/getRepeaters/{callsign}"

@using RepeaterQTH.Data
@using System.Linq.Dynamic.Core
@using BlazorLeaflet.Models

@inject RepeaterDirectoryService RepeaterService
@inject IJSRuntime jsRuntime
@inject NavigationManager MyNavigationManager
@inject SearchData searchData
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using MongoDB.Bson.Serialization.Options

<h1>Repeater Directory</h1>


@if (repeaters == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RepeaterList repeaters=repeaters/>
   
}

@code {
    [Parameter]  
    #nullable enable
    public string? callsign { get; set; } 
    #nullable disable
    
    private Repeater[] repeaters;

    private WindowNavigatorGeolocation geolocationWrapper;

    protected override async Task OnInitializedAsync()
    {
        if (searchData.activeType == "Proximity")
        {
            LatLng currentPos = new LatLng();
            if (searchData.zipcode != null)
            {
                var zipInfo = await RepeaterService.getLatLngForZip(searchData.zipcode);
                currentPos = new LatLng((float)zipInfo.lat, (float)zipInfo.lng);
            }
            else
            {
                currentPos = new LatLng((float)searchData.lat, (float)searchData.lng);
            }
            int range = searchData.range;
            if (searchData.rangeUnit == "MI")
            {
                range = (int)(range * 1.069);
            }


            if (callsign != null)
            {
                repeaters = await RepeaterService.GetRepeatersByCallSignAsync(callsign);

            }
            else
            {
                repeaters = await RepeaterService.GetRepeaterListByLocation(currentPos.Lat, currentPos.Lng, range);
            }
        } 
        else if (searchData.activeType == "State")
        {
            repeaters = await RepeaterService.GetRepeaterListByState(searchData.state);
        }

        // filter
        if (searchData.FM)
        {
            repeaters = repeaters.Where(r => r.FMEnabled == true).ToArray();
        }
        if (searchData.DMR)
        {
            repeaters = repeaters.Where(r => r.DMREnabled == true).ToArray();
        }
        if (searchData.DSTAR)
        {
            repeaters = repeaters.Where(r => r.DStarEnabled == true).ToArray();
        }
        if (searchData.NXDN)
        {
            repeaters = repeaters.Where(r => r.NXDNEnabled == true).ToArray();
        }
        if (searchData.P25)
        {
            repeaters = repeaters.Where(r => r.P25Enabled == true).ToArray();
        }
        if (searchData.YSF)
        {
            repeaters = repeaters.Where(r => r.YSFEnabled == true).ToArray();
        }
        if (searchData.AllStar)
        {
            repeaters = repeaters.Where(r =>  r.AllStarId.HasValue && r.AllStarId.Value != 0).ToArray();
        }
        if (searchData.Echolink)
        {
            repeaters = repeaters.Where(r =>  r.EcholinkNum.HasValue && r.EcholinkNum.Value != 0).ToArray();
        }
        if (searchData.IRLP)
        {
            repeaters = repeaters.Where(r =>r.IRLPNum.HasValue && r.IRLPNum.Value != 0).ToArray();
        }
    }

   

}

