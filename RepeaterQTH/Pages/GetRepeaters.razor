@page "/getRepeaters/"
@page "/getRepeaters/{callsign}"
@inherits BasePageComponent

@using RepeaterQTH.Data
@using System.Linq.Dynamic.Core
@using BlazorLeaflet.Models
@using RepeaterQTH.Support;

@inject RepeaterDirectoryService RepeaterService
@inject IJSRuntime jsRuntime
@inject NavigationManager MyNavigationManager
@inject SearchData searchData
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using MongoDB.Bson.Serialization.Options


<div style="float: left"><h1>Repeater Directory</h1></div>
<div style="float: right; margin-top: 20px">
    <select>
        <option>Export</option>
        <option @onclick="@(() => Download("csv"))">Export CSV</option>
        <option @onclick="@(() => Download("chirp"))">Export Chirp</option>
    </select>
</div>


@if (repeaters == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RepeaterList repeaters=repeaters/>

}


@code {

    [Parameter]
#nullable enable
        public string? callsign { get; set; }
#nullable disable

    private Repeater[] repeaters;



    protected override async Task OnInitializedAsync()
    {
        if (searchData.activeType == "Proximity")
        {
            LatLng currentPos = new LatLng();
            if (searchData.zipcode is { Length: >= 5 })
            {
                var zipInfo = await RepeaterService.getLatLngForZip(searchData.zipcode);
                if (zipInfo != null)
                {
                    currentPos = new LatLng((float)zipInfo.lat, (float)zipInfo.lng);
                }
                else
                {
                    currentPos = new LatLng(0, 0);
                }

            }
            else
            {
                currentPos = new LatLng((float)searchData.lat, (float)searchData.lng);
            }
            int range = searchData.range;
            if (searchData.rangeUnit == "MI")
            {
                range = (int)(range * 1.069);
            }


            if (callsign != null)
            {
                repeaters = await RepeaterService.GetRepeatersByCallSignAsync(callsign);

            }
            else
            {
                repeaters = await RepeaterService.GetRepeaterListByLocation(currentPos.Lat, currentPos.Lng, range);
            }
        }
        else if (searchData.activeType == "State")
        {
            repeaters = await RepeaterService.GetRepeaterListByState(searchData.state);
        }

        repeaters = Utility.FilterRepeaters(repeaters, searchData);

    }

    async Task Download(string type)
    {
        var export = new Export();
        switch (type)
        {
            case "csv":
                await export.DownloadCSV(repeaters, jsRuntime);
                break;
            case "chirp":
                await export.DownloadChirp(repeaters, jsRuntime);
                break;
        }
    }

}

