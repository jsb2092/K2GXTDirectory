@page "/mapRepeaters"
@inherits BasePageComponent
@using RepeaterQTH.Data
@using BlazorLeaflet
@using BlazorLeaflet.Models
@using System.Drawing
@using BlazorLeaflet.Models.Events
@inject RepeaterDirectoryService RepeaterService
@inject IJSRuntime jsRuntime
@inject SearchData searchData
@inject NavigationManager NavManager;

@using BrowserInterop.Geolocation


@if (repeaters == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <a @onclick="@GoBack"> <img width="16" src="/images/back.png"/> Back</a>
    <div id="bigRepeaterMap">
        <LeafletMap Map="_map"/>
    </div>

}
@code {
    private Repeater[] repeaters;
    private Map _map;
    private WindowNavigatorGeolocation geolocationWrapper;

    private void GoBack()
    {
        NavManager.NavigateTo(_pageState.GetGoBackPage());
    }

    protected override async Task OnInitializedAsync()
    {
        
        LatLng currentPos = new LatLng();
        int range = searchData.range;
        if (searchData.rangeUnit == "MI")
        {
            range = (int)(range * 1.069);
        }
        if (searchData.activeType == "Proximity")
        {
           
            if (searchData.zipcode != null)
            {
                var zipInfo = await RepeaterService.getLatLngForZip(searchData.zipcode);
                currentPos = new LatLng((float)zipInfo.lat, (float)zipInfo.lng);
            }
            else
            {
                currentPos = new LatLng((float)searchData.lat, (float)searchData.lng);
            }
            repeaters = await RepeaterService.GetRepeaterListByLocation(currentPos.Lat, currentPos.Lng, range);
        } else if (searchData.activeType == "State")
        {
            range = 300;
            var state = await RepeaterService.getLatLngForState(searchData.state);
            currentPos.Lat = (float)state.lat;
            currentPos.Lng = (float)state.lng;
            repeaters = await RepeaterService.GetRepeaterListByState(searchData.state, range);
            
        }
        
            var zoom = range switch
            {
                <= 30 => 10,
                <= 50 => 9,
                <= 125 => 8,
                _ => 7
            };
            _map = new Map(jsRuntime)
            {
                Center = currentPos,
                Zoom = zoom
            };
  
         
            _map.OnInitialized += () =>
            {
                var tiles = new TileLayer
                {
                    UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                    Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",

                };
                
                _map.AddLayer(tiles);
                

                foreach (var repeater in repeaters)
                {

                    if (repeater.Location.coordinates[1] != null)
                    {
                        var loc = new LatLng((float)repeater.Location.coordinates[1].Value, (float)repeater.Location.coordinates[0].Value);

                        bool hasCoverage = repeater.CoverageRadiusKM != null && repeater.CoverageRadiusKM > 0;
              

                        if (hasCoverage)
                        {
                            _map.AddLayer(new Circle
                            {
                                Position = loc,
    // radius in m
                                Radius = repeater.CoverageRadiusKM.Value * 1000f,
                                Fill = true,
                                FillColor = Color.Blue,
                                FillOpacity = .10
                            });
                        }
                        _map.AddLayer(new Marker(loc)
                        {
                            IsInteractive = true,
                            Position = loc,
                            Icon = new Icon()
                            {
                                Url = "/images/marker-icon.png",
                                Anchor = new Point(7, 25),
                                TooltipAnchor = new Point(0, 0)

                            },

                            Tooltip = new Tooltip()
                            {
                                IsPermanent = false,
                                Direction = "bottom",
                                Content = repeater.CallSign,
                                
                            }, IsBubblingMouseEvents = true

                        });
                    

                    }

                }
            };
        _map.OnClick += MapOnOnClick;

    }
    private async void MapOnOnClick(Map sender, MouseEvent e)
    {
   
        var repeater = (await RepeaterService.GetRepeaterListByLocation((e.LatLng.Lat), e.LatLng.Lng, 1, 1));


        if (repeater != null && repeater.Length > 0)
        {
            NavManager.NavigateTo("/repeaterDetails/" + e.LatLng.Lat + "/" + e.LatLng.Lng);
        }

    }
}



