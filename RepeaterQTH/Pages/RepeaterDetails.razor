@page "/repeaterDetails/{id}"
@page "/repeaterDetails/{lat}/{lng}"
@inherits BasePageComponent
@using RepeaterQTH.Data
@using BlazorLeaflet
@using BlazorLeaflet.Models
@using System.Drawing

@inject RepeaterDirectoryService RepeaterService
@inject IJSRuntime jsRuntime
@inject NavigationManager NavManager;




@if (repeater == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="float: left; margin-right: 30px">
        <a @onclick="@GoBack"> <img width="16" src="/images/back.png"/> Back</a>
        <div ><p>Repeater Details for: @repeater.CallSign</p></div>
        <table id="repeaterDetails">
            <tr><td style="width:150px">Callsign: </td><td>@repeater.CallSign</td></tr>
            <tr><td>Use: </td> <td>@(repeater.isOpenString)</td></tr>
        
            <tr><td>Rx Frequency: </td> <td>@repeater.RxFreq</td></tr>
            <tr><td>Tx Frequency: </td><td>@repeater.TxFreq</td></tr>

            <tr><td>Offset: </td><td>@repeater.Offset</td></tr>
        

            <tr><td>Tone: </td><td>@repeater.Tone</td></tr>
            @if (repeater.CTCSS != null && (repeater.Tone != "CSQ" && repeater.Tone != "None"))
            {

                <tr><td>Tx Tone: </td><td>@repeater.CTCSS</td></tr>
                @if (repeater.RxCTCSS != null && repeater.Tone == "T-SQL")
                {
                    <tr><td>Rx Tone: </td><td>@repeater.RxCTCSS</td></tr>
                }
            }
            <tr><td>State: </td><td>@repeater.State</td></tr>
            <tr><td>County: </td><td>@repeater.County</td></tr>
            @if (!string.IsNullOrEmpty(repeater.GridSquare))
            {
                <tr><td>Grid Square: </td><td>@repeater.GridSquare</td></tr>
            }
            <tr><td style="vertical-align: top">Located Info: </td><td style="width:75px">@repeater.LocationInfo</td></tr>
            <tr><td style="vertical-align: top">More Info: </td><td>@repeater.Details</td></tr>
            @if (repeater.FMEnabled)
            {
                <tr><td>FM Analog Mode:</td><td>@repeater.FMEnabledString</td></tr>
                @if (repeater.AllStarId != null)
                {
                    <tr><td>AllStar ID:</td><td><a target="_blank" href="http://stats.allstarlink.org/nodeinfo.cgi?node=@repeater.AllStarId">@repeater.AllStarId</a> </td></tr>
                }
                @if (repeater.EcholinkNum != null)
                {
                    <tr><td>Echolink #: </td> <td>@repeater.EcholinkNum</td></tr>
                    <tr><td>Echolink Call: </td> <td>@repeater.EcholinkCall></td></tr>
                }
                @if (repeater.IRLPNum != null)
                {
                    <tr><td>IRLP #: </td> <td><a target="_blank" href="http://status.irlp.net/?nodeid=@repeater.IRLPNum">@repeater.IRLPNum></a></td></tr>
                }
            }
            @if (repeater.DStarEnabled)
            {
                <tr><td>D-Star Mode:</td><td>@repeater.DStarEnabledString</td></tr>
                <tr><td>D-Star Type:</td><td>@repeater.DStarType</td></tr>
            }
            @if (repeater.DMREnabled)
            {
                <tr><td>DMR Mode:</td><td>@repeater.DMREnabledString</td></tr>
                <tr><td>DMR Id:</td><td>@repeater.DMRId</td></tr>
                <tr><td>DMR Color Code:</td><td>@repeater.DMRColorCode</td></tr>
                <tr><td>DMR Static TG1:</td><td>@repeater.DMRStaticTG1</td></tr>
                <tr><td>DMR Static TG2:</td><td>@repeater.DMRStaticTG2</td></tr>
            }
            @if (repeater.NXDNEnabled)
            {
                <tr><td>NXDM Mode:</td><td>@repeater.NXDNEnabledString</td></tr>
                <tr><td>NXDM Mode:</td><td>@repeater.NXDNRAN</td></tr>
                <tr><td>NXDM Mode:</td><td>@repeater.NXDNBandwidth</td></tr>
            }
            @if (repeater.P25Enabled)
            {
                <tr><td>P25 Mode:</td><td>@repeater.P25EnabledString</td></tr>
                <tr><td>P25 NAC $:</td><td>@repeater.P25Nac</td></tr>
            } 
            @if (repeater.YSFEnabled)
            {
                <tr><td>YSR Mode:</td><td>@repeater.YSFEnabledString</td></tr>
                <tr><td>YSR Bandwidth:</td><td>@repeater.YSFBandwidth</td></tr>
                <tr><td>YSF DG Up:</td><td>@repeater.YSFDGUp</td></tr>
                <tr><td>YSF DG Down:</td><td>@repeater.YSFDGDown</td></tr>
            }
          
        </table>
    </div>
    @if (!string.IsNullOrEmpty(repeater.GridSquare))
    {
        <div id="repeaterMap">
            <LeafletMap Map="_map" />
        </div>
    }




}

@code {

    [Parameter]
    public string id { get; set; }
    [Parameter]
    public string lat { get; set; }
    [Parameter]
    public string lng { get; set; }

    private Repeater repeater;
 
    private Map _map;

    private void GoBack()
    {
        var pg = _pageState.GetGoBackPage();
        if (pg.Contains("mapAllRepeaters"))
        {
            pg = "mapAllRepeaters/" + repeater.Location.coordinates[1] + "/" + repeater.Location.coordinates[0];
        }
        NavManager.NavigateTo(pg);
    }

    protected override async Task OnInitializedAsync()
    {

        if (id != null)
        {
            repeater = await RepeaterService.GetRepeaterAsync(id);
        }
        else
        {
            repeater = (await RepeaterService.GetRepeaterListByLocation(Double.Parse(lat), Double.Parse(lng), 1, 1)).First();
        }
        if (repeater.Location.coordinates[1] != null)
        {
            bool hasCoverage = repeater.CoverageRadiusKM != null && repeater.CoverageRadiusKM > 0;
            
            var loc = new LatLng((float)repeater.Location.coordinates[1].Value, (float)repeater.Location.coordinates[0].Value);


            int zoom;
            if (!hasCoverage || (repeater.CoverageRadiusKM < 20))
            {
                zoom = 10;
            }
            else if (!hasCoverage || (repeater.CoverageRadiusKM < 40))
            {
                zoom = 9;
            }
            else
            {
                zoom = 8;
            }
      
            _map = new Map(jsRuntime)
            {
                Center = loc,
                Zoom = (float)zoom
            };

            _map.OnInitialized += () =>
            {
                _map.AddLayer(new TileLayer
                {
                    UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                    Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
                });
                if (hasCoverage)
                {
                    _map.AddLayer(new Circle
                    {
                        Position = loc,
                        // radius in m
                        Radius = repeater.CoverageRadiusKM.Value * 1000f,
                        Fill = true,
                        FillColor = Color.Blue,
                        FillOpacity = .10
                    });
                }
                var marker = new Marker(loc)
                {
                    IsInteractive = true,
                    ZIndexOffset = 100,
                    Position = loc,
                    Icon = new Icon()
                    {
                        Url = "/images/marker-icon.png",
                        Anchor = new Point(7, 25),
                        TooltipAnchor = new Point(0, 0)

                    },
                    Tooltip = new Tooltip()
                    {
                        IsPermanent = false,
                        Direction = "bottom",
                        Content = repeater.CallSign
                    }

                };

             
                _map.AddLayer(marker);
             
             
           
         
              
            };
      

    //     mapCentre = new LatLng(repeater.Location.coordinates[1].Value, repeater.Location.coordinates[0].Value);




        }
    }


    

}