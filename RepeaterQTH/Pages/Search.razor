@page "/search/"
@using RepeaterQTH.Data
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using BlazorLeaflet.Models
@using Blazored.FluentValidation
@using MaxMind.GeoIP2
@using MongoDB.Driver
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using System.IO
@inherits BasePageComponent
@inject RepeaterDirectoryService RepeaterService
@inject NavigationManager NavManager
@inject SearchData searchData
@inject IJSRuntime jsRuntime


<EditForm Model="@searchData" OnValidSubmit="@HandleValidSubmit">

    <ValidationSummary/>


    <div style="float:left; margin-right:30px">
        Enter Search Terms below: <button type="reset">Clear Data</button><br/>
        
        <TabControl isSearch="true">
            <TabPage Text="Proximity">
                <div class="searchContainer searchContainer-border">
                    <table class="table table-borderless table-sm table-dark searchTable" >
                        <tr><td style="width:150px">Zipcode: </td><td><input class="editInput" @bind="@searchData.zipcode"></td></tr>
                        <tr><td colspan="2" style="text-align: center">--- OR --- </td></tr>
                        <tr><td>Lat/Long: </td><td><input class="editInput-half" @bind=@searchData.lat><input class="editInput-half" @bind=@searchData.lng>&nbsp;<button type="button" @onclick="@findUserPos">Find</button></td></tr>
                        <tr><td>&nbsp;</td></tr>
                        <tr><td>Within: </td><td><input  class="editInput" type="number" @bind="@searchData.range"> <select @bind=@searchData.rangeUnit>
                            <option value="KM">KM</option>
                            <option value="MI">MI</option>
                        </select></td></tr>
                    </table>
                </div>
            </TabPage>
          
            <TabPage Text="State">
                <div class="searchContainer searchContainer-border">
                    <table class="table table-borderless table-dark searchTable">
                        <tr><td style="width:150px">State: </td>
                            <td>
                                <select class="editInput" @bind=@searchData.state>
                                    @foreach (var state in counties.ToArray().AsQueryable().Select(c => c.state_name).Distinct())
                                    {
                                        <option value="@state">@state</option>
                                    }
                                </select>
                            </td>
                        </tr>
                    </table>
                </div>
            </TabPage>
        </TabControl>
           <div class="searchContainer">
            <table class="table-dark searchTable" id="modesTable">
                <tr><td ></td><td>Analog</td><td>DMR</td><td>D-Star</td><td>NXDN</td><td>P25</td><td>YSF</td></tr>
                <tr><td style="text-align: right; padding-right: 15px" >Mode: </td><td><input type="checkbox" @bind="@searchData.FM" /></td><td><input type="checkbox" @bind="@searchData.DMR" /></td><td><input type="checkbox" @bind="@searchData.DSTAR" /></td><td><input type="checkbox" @bind="@searchData.NXDN" /></td><td><input type="checkbox" @bind="@searchData.P25" /></td><td><input type="checkbox" @bind="@searchData.YSF" /></td></tr>
            <tr><td colspan="5"><br /></td></tr>

                <tr><td ></td><td>Allstar</td><td>EchoLnk</td><td>IRLP</td></tr>
                <tr><td style="text-align: right; padding-right: 15px" >Feature: </td><td><input type="checkbox" @bind="@searchData.AllStar" /></td><td><input type="checkbox" @bind="@searchData.Echolink" /></td><td><input type="checkbox" @bind="@searchData.IRLP" /></td></tr>
                <tr><td colspan="5"><br /></td></tr>
                    
                <tr><td ></td><td colspan="2">Available</td><td></td><td colspan="2">Selected</td></tr>
                <tr><td style="text-align: right; padding-right: 15px; vertical-align: top"  >Band:</td>
                    <td colspan="2" style="text-align: left; vertical-align:top">
                    <select size="7" style="width:100%" @bind="CurrentBandToAdd">
                        @foreach(var band in searchData.AvailableBands) {
                            <option id="@band">@band</option>
                        }
                </select>
                </td><td style="text-align: center; padding-top:25px; vertical-align:top">
                    <a @onclick="@AddBand"><img class="clickable" src="images/arrow-right-white.png" width=25/></a><br />
                    <a @onclick="@RemoveBand"><img class="clickable" src="images/arrow-left-white.png" width=25/></a></td>
                <td colspan="2" style="text-align: left;">
                <select size="7" style="width:100%" @bind="CurrentBandToRemove">
                        @foreach(var band in searchData.SelectedBands) {
                           <option id="@band">@band</option>
                        }
                </select>


                </td>
               </tr>
            </table>

        </div>
        <button type="submit" @onclick="@(ListResults)">List</button> or  
        <button type="submit" @onclick="@(MapResults)">Map</button>
    </div>
</EditForm>

@code {

    private WindowNavigatorGeolocation geolocationWrapper;
    private Counties[] counties;
    private string SelectedBands = string.Empty;
    private string CurrentBandToAdd;
    private string CurrentBandToRemove;
   

    protected override async Task OnInitializedAsync()
    {
        counties ??= await RepeaterService.getCounties();
        if (searchData.AvailableBands.Count > 0) CurrentBandToAdd = searchData.AvailableBands[0];
        // reset the search values???
    }

    public void AddBand()
    {
        //searchData.AvailableBands.Remove(CurrentBandToAdd);
        if (!searchData.SelectedBands.Contains(CurrentBandToAdd)) searchData.SelectedBands.Add(CurrentBandToAdd);
        if (searchData.SelectedBands.Count > 1 && searchData.SelectedBands.Contains("All")) searchData.SelectedBands.Remove("All");

        // if (searchData.AvailableBands.Count > 0) CurrentBandToAdd = searchData.AvailableBands[0];
       
    }

    public void RemoveBand()
    {
        if (!string.IsNullOrEmpty(CurrentBandToRemove)) {
       //     searchData.AvailableBands.Add(CurrentBandToRemove);
            searchData.SelectedBands.Remove(CurrentBandToRemove);
            if (searchData.SelectedBands.Count > 0) CurrentBandToRemove = searchData.SelectedBands[0];
            if (searchData.SelectedBands.Count == 0) searchData.SelectedBands.Add("All");
        }
       
}


    
    public async Task<bool> findUserPos()
    {
        GeolocationPosition currentPosition = new GeolocationPosition();
        try
        {
            var window = await jsRuntime.Window();
            var navigator = await window.Navigator();
            geolocationWrapper = navigator.Geolocation;
            currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
            {
                EnableHighAccuracy = true,
                MaximumAgeTimeSpan = TimeSpan.FromHours(1),
                TimeoutTimeSpan = TimeSpan.FromMinutes(1)
            })).Location;
        }
        catch
        {
            try
            {
                var ip = await GetIpAddress();
                var ipCache = await RepeaterService.findIPCache(ip);
                if (ipCache != null && ipCache.updated > DateTime.Now.AddDays(-7))
                {
                    currentPosition.Coords.Latitude = (float)ipCache.lat;
                    currentPosition.Coords.Longitude= (float)ipCache.lng;       
                }
                else
                {
                    using StreamReader r = new StreamReader("connection.json");
                    string json = r.ReadToEnd();
                    var items = JsonConvert.DeserializeObject<Dictionary<string, string>>(json);

                    MongoClient dbClient =
                        new MongoClient(items["connectionString"]);
                    var client = new WebServiceClient(int.Parse(items["geolite-user"]), items["geolite-key"], host: "geolite.info");

                    var response = await client.CityAsync(ip);
                    currentPosition.Coords.Latitude = (float)response.Location.Latitude;
                    currentPosition.Coords.Longitude = (float)response.Location.Longitude;
                    await RepeaterService.insertIPCache(new IPLocation() { ip = ip, lat = response.Location.Latitude, lng = response.Location.Longitude, updated = DateTime.Now });
                }
            }
            catch (Exception)
            {
            }
        }
        if (currentPosition?.Coords != null)
        {
            searchData.lat = currentPosition.Coords.Latitude;
            searchData.lng = currentPosition.Coords.Longitude;
 
        }
        return false;
    }
    public async Task<string> GetIpAddress()
    {
        try
        {
            var ipAddress = await jsRuntime.InvokeAsync<string>("getIpAddress")
                .ConfigureAwait(true);
            return ipAddress;
        }
        catch(Exception e)
        {
    //If your request was blocked by CORS or some extension like uBlock Origin then you will get an exception.
            return string.Empty;
        }
    }



    private  void HandleValidSubmit()
    {
        var a = searchData.zipcode;
   
    }

    public void ListResults()
    {
        NavManager.NavigateTo("/getRepeaters/");

    }
     
    
    public void MapResults()
    {
        NavManager.NavigateTo("/mapRepeaters/");

    }

        
}
